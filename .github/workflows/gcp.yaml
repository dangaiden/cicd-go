name: Simple CI/CD pipeline with Docker and GKE

on:
  push:
    #paths:
      #- 'app/**/*'
      #- 'test/**/*'
      #- 'Dockerfile'
      #- '.github/**'
    paths-ignore:
      - 'infra/**'
      - 'img/**'
      - 'k8s/**'
      - 'base/**'
    branches:
      - master

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GKE_CLUSTER: october-cicd-go-cl   
  GKE_ZONE: us-west1-c   
  DEPLOYMENT_NAME: go-deployment
  IMAGE: goserver

jobs:
# jobs:
# # CI
#   unit-test:
#     name: Unit-test
#     strategy:
#       matrix:
#         go-version: 1.16.x
#         os: ubuntu-latest
#     runs-on: ${{ matrix.os }}
#     steps:
#     - name: Install Go
#       uses: actions/setup-go@v2
#       with:
#         go-version: ${{ matrix.go-version }}
#     - name: Checkout code
#       uses: actions/checkout@v2
#     - name: Test
#       run: go test -v


#CI-2
  ci-setup-build-publish:
    name: CI2-Setup, Build, Publish
    #needs: unit-test
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    # Setup gcloud CLI
    - uses: google-github-actions/setup-gcloud@v0.2.0
      with:
        service_account_key: ${{ secrets.GKE_SA_KEY }}
        project_id: ${{ secrets.GKE_PROJECT }}
    
    #- name: Get vars values
    #    id: vars

    # Configure Docker to use the gcloud command-line tool as a credential
    # helper for authentication
    - run: |-
        gcloud --quiet auth configure-docker

    

    # Build the Docker image
    - name: Build
      run: |-
        docker build \
          --tag "gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA" \
          --build-arg GITHUB_SHA="$GITHUB_SHA" \
          --build-arg GITHUB_REF="$GITHUB_REF" \
          .
  
    # IMAGE TESTING BEFORE PUBLISHING


    # Push the Docker image to Google Container Registry once has been tested

    - name: Publish
      run: |-
        docker push "gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA"

#############################################################################
#CD
  cd-Deploy:
    name: CDDeploy
    needs: ci-setup-build-publish
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    # Setup gcloud CLI
    - uses: google-github-actions/setup-gcloud@v0.2.0
      with:
        service_account_key: ${{ secrets.GKE_SA_KEY }}
        project_id: ${{ secrets.GKE_PROJECT }}

    # Get the GKE credentials so we can deploy to the cluster
    - uses: google-github-actions/get-gke-credentials@v0.2.1
      with:
        cluster_name: ${{ env.GKE_CLUSTER }}
        location: ${{ env.GKE_ZONE }}
        credentials: ${{ secrets.GKE_SA_KEY }}

    # Install and configure Kustomize
    - name: Set up Kustomize
      run: |-
        curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
        chmod u+x ./kustomize

    # Deploy the Docker image to the GKE cluster using Kustomize which will replace the image name
    # and then apply it with kubectl. The kubectl rollout verifies if the deployment was successful.
    - name: Deployment rollout
      run: |-
        ./kustomize edit set image gcr.io/PROJECT_ID/IMAGE:TAG=gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA
        ./kustomize build . | kubectl apply -f - 
        kubectl rollout status deployment/$DEPLOYMENT_NAME -n app
    
    - name: Review pod status
      run: |-
        sleep 10
        if $(kubectl get pods -n app | grep Running >/dev/null);
        then
          echo "New pod is in Running status"
        else
          echo "Pod is not Running correctly"
          exit 1
      shell: bash
